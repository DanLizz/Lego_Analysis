# -*- coding: utf-8 -*-
"""Lego_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13ND93nbwhNpL7SzFGOIAnhAO1oaA1pIR

# Introduction

This case study has interesting questions about the history of the LEGO company, their product offering, and which LEGO set ultimately rules them all:

<ul type="square">
<li>What is the most enormous LEGO set ever created and how many parts did it have?</li>

<li>How did the LEGO company start out? In which year were the first LEGO sets released and how many sets did the company sell when it first launched?</li>

<li>Which LEGO theme has the most sets? Is it one of LEGO's own themes like Ninjago or a theme they licensed liked Harry Potter or Marvel Superheroes?</li>

<li>When did the LEGO company really expand its product offering? Can we spot a change in the company strategy based on how many themes and sets did it released year-on-year?</li>

<li>Did LEGO sets grow in size and complexity over time? Do older LEGO 
sets tend to have more or fewer parts than newer sets?</li>
</ul>

**Data Source**

[Rebrickable](https://rebrickable.com/downloads/) has compiled data on all the LEGO pieces in existence.

<img src="https://i.imgur.com/49FNOHj.jpg">

# Import Statements
"""

import pandas as pd
import matplotlib.pyplot as plt

"""# Data Exploration

How many different colours does the LEGO company produce?
"""

color_df = pd.read_csv('data/colors.csv')

color_df.head()

color_df.name.nunique()

"""The number of transparent colours where <code>is_trans == 't'</code> versus the number of opaque colours where <code>is_trans == 'f'</code>."""

color_df.groupby('is_trans').count()

color_df.is_trans.value_counts()

"""###**Understanding LEGO Themes vs. LEGO Sets**

Walk into a LEGO store and you will see their products organised by theme. Their themes include Star Wars, Batman, Harry Potter and many more.

<img src="https://i.imgur.com/aKcwkSx.png">

A lego set is a particular box of LEGO or product. Therefore, a single theme typically has many different sets.

<img src="https://i.imgur.com/whB1olq.png">

The <code>sets.csv</code> data contains a list of sets over the years and the number of parts that each of these sets contained.
"""

set_df = pd.read_csv('data/sets.csv')

set_df.head()

set_df.tail()

"""Which year were the first LEGO sets released and what were these sets called?"""

set_df.year.min()

set_df.loc[set_df['year'] ==1949, 'name']

"""How many different sets did LEGO sell in their first year? How many types of LEGO products were on offer in the year the company started?"""

set_df.loc[set_df['year'] ==1987, 'name'].filter(items=['Offer'])

"""Top 5 LEGO sets with the most number of parts. """

set_df.sort_values('num_parts', ascending=False).head()

"""The number of LEGO sets released year-on-year. How do the number of sets released in 1955 compare to the number of sets released in 2019? """

sets_by_year = set_df.groupby('year').count()

sets_by_year.set_num.head()

"""The number of LEGO releases on a line chart using Matplotlib. <br>

"""

plt.plot(sets_by_year.index, sets_by_year.set_num)

"""Note that the .csv file is from late 2020, so to plot the full calendar years, we will have to exclude some data from your chart."""

plt.plot(sets_by_year.index[:-2], sets_by_year.set_num[:-2])

"""### Aggregate Data with the Python .agg() Function

Let's work out the number of different themes shipped by year. This means we have to count the number of unique theme_ids per calendar year.
"""

themes_by_year = set_df.groupby('year').agg({'theme_id': pd.Series.nunique})

themes_by_year.rename(columns = {'theme_id': 'nr_themes'}, inplace=True)
themes_by_year.head()

"""The number of themes released by year on a line chart."""

plt.plot(themes_by_year.index[:-2], themes_by_year.nr_themes[:-2])

"""### Line Charts with Two Seperate Axes"""

ax1= plt.gca()
ax2 = ax1.twinx()

ax1.plot(sets_by_year.index[:-2], sets_by_year.set_num[:-2], color='g')
ax2.plot(themes_by_year.index[:-2], themes_by_year.nr_themes[:-2], color='b')

ax1.set_xlabel('Year')
ax1.set_ylabel('Number of Sets', color='green')
ax2.set_ylabel('Number of Themes', color='blue')

"""**The average number of parts per set.**
<br>
How many parts did the average LEGO set released in 1954 compared to say, 2017?
"""

parts_per_set = set_df.groupby('year').agg({'num_parts': pd.Series.mean})

parts_per_set.head()

parts_per_set.tail()

"""### Scatter Plots in Matplotlib

Has the size and complexity of LEGO sets increased over time based on the number of parts?
"""

plt.scatter(parts_per_set.index[:-2], parts_per_set.num_parts[:-2])